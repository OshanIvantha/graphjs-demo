'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _enumify = require('enumify');

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Define the types of charts
 *
 * LINE_CHART |
 * SIMPLE_XY_LINE_CHART |
 * STEP_CHART |
 * BAR_CHART |
 * PIE_CHART |
 * COMBINATION_CHART |
 * MULTIPLE_XY_LINE_CHART |
 * AREA_CHART |
 * STACKED_BAR_CHART |
 * DONUT_CHART |
 * SPLINE_CHART |
 * LINE_CHART_WITH_REGIONS |
 * STACKED_AREA_CHART |
 * SCATTER_PLOT |
 * GUAGE_CHART |
 */
var ChartType = function (_Enum) {
  _inherits(ChartType, _Enum);

  function ChartType() {
    _classCallCheck(this, ChartType);

    return _possibleConstructorReturn(this, (ChartType.__proto__ || Object.getPrototypeOf(ChartType)).apply(this, arguments));
  }

  return ChartType;
}(_enumify.Enum);

exports.default = ChartType;


ChartType.initEnum(['LINE_CHART', 'SIMPLE_XY_LINE_CHART', 'STEP_CHART', 'BAR_CHART', 'PIE_CHART', 'COMBINATION_CHART', 'MULTIPLE_XY_LINE_CHART', 'AREA_CHART', 'STACKED_BAR_CHART', 'DONUT_CHART', 'SPLINE_CHART', 'LINE_CHART_WITH_REGIONS', 'STACKED_AREA_CHART', 'SCATTER_PLOT', 'GAUGE_CHART']);