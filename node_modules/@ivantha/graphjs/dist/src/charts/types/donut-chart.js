'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _chart = require('../chart');

var _chart2 = _interopRequireDefault(_chart);

var _invalidGrammarError = require('../../errors/invalid-grammar-error');

var _invalidGrammarError2 = _interopRequireDefault(_invalidGrammarError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents a Donut Chart.
 */
var DonutChart = function (_Chart) {
	_inherits(DonutChart, _Chart);

	/**
  * Creates an instance of the DonutChart class
  * @param {string} data - JSON string containing the data columns.
  */
	function DonutChart(data) {
		_classCallCheck(this, DonutChart);

		// Set charts types as Donut Chart
		var _this = _possibleConstructorReturn(this, (DonutChart.__proto__ || Object.getPrototypeOf(DonutChart)).call(this, data));

		_this._outputJson.data.type = 'donut';
		return _this;
	}

	/**
  * Alter the parameters of the chart using the provided grammar.
  * @param {string} grammar - Simple grammar string describing the chart.
  * @returns {boolean} - Returns true if the grammar is parsed.
  */


	_createClass(DonutChart, [{
		key: 'do',
		value: function _do(grammar) {
			if (!_get(DonutChart.prototype.__proto__ || Object.getPrototypeOf(DonutChart.prototype), 'do', this).call(this, grammar)) {
				if (grammar.match(new RegExp('set title as [0-9a-zA-Z\\-]+'))) {
					var chartTitle = grammar.match(new RegExp('as [0-9a-zA-Z\\-]+'))[0].split(' ')[1];
					this._outputJson.donut.title = chartTitle;
					return true;
				} else {
					throw new _invalidGrammarError2.default();
				}
			}
		}
	}]);

	return DonutChart;
}(_chart2.default);

exports.default = DonutChart;