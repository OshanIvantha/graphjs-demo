'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _chart = require('../chart');

var _chart2 = _interopRequireDefault(_chart);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Represents a Scatter Plot.
 */
var ScatterPlot = function (_Chart) {
	_inherits(ScatterPlot, _Chart);

	/**
  * Creates an instance of the ScatterPlot class
  * @param {string} data - JSON string containing the data columns.
  */
	function ScatterPlot(data) {
		_classCallCheck(this, ScatterPlot);

		// Set charts types as Scatter Plot
		var _this = _possibleConstructorReturn(this, (ScatterPlot.__proto__ || Object.getPrototypeOf(ScatterPlot)).call(this, data));

		_this._outputJson.data.type = 'scatter';
		return _this;
	}

	return ScatterPlot;
}(_chart2.default);

exports.default = ScatterPlot;